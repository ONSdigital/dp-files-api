// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-files-api/mongo"
	"sync"
)

// Ensure, that MongoCursorMock does implement mongo.MongoCursor.
// If this is not the case, regenerate this file with moq.
var _ mongo.MongoCursor = &MongoCursorMock{}

// MongoCursorMock is a mock implementation of mongo.MongoCursor.
//
// 	func TestSomethingThatUsesMongoCursor(t *testing.T) {
//
// 		// make and configure a mocked mongo.MongoCursor
// 		mockedMongoCursor := &MongoCursorMock{
// 			CloseFunc: func(ctx context.Context) error {
// 				panic("mock out the Close method")
// 			},
// 			DecodeFunc: func(val interface{}) error {
// 				panic("mock out the Decode method")
// 			},
// 			ErrFunc: func() error {
// 				panic("mock out the Err method")
// 			},
// 			NextFunc: func(ctx context.Context) bool {
// 				panic("mock out the Next method")
// 			},
// 		}
//
// 		// use mockedMongoCursor in code that requires mongo.MongoCursor
// 		// and then make assertions.
//
// 	}
type MongoCursorMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// DecodeFunc mocks the Decode method.
	DecodeFunc func(val interface{}) error

	// ErrFunc mocks the Err method.
	ErrFunc func() error

	// NextFunc mocks the Next method.
	NextFunc func(ctx context.Context) bool

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Decode holds details about calls to the Decode method.
		Decode []struct {
			// Val is the val argument value.
			Val interface{}
		}
		// Err holds details about calls to the Err method.
		Err []struct {
		}
		// Next holds details about calls to the Next method.
		Next []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockClose  sync.RWMutex
	lockDecode sync.RWMutex
	lockErr    sync.RWMutex
	lockNext   sync.RWMutex
}

// Close calls CloseFunc.
func (mock *MongoCursorMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("MongoCursorMock.CloseFunc: method is nil but MongoCursor.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedMongoCursor.CloseCalls())
func (mock *MongoCursorMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Decode calls DecodeFunc.
func (mock *MongoCursorMock) Decode(val interface{}) error {
	if mock.DecodeFunc == nil {
		panic("MongoCursorMock.DecodeFunc: method is nil but MongoCursor.Decode was just called")
	}
	callInfo := struct {
		Val interface{}
	}{
		Val: val,
	}
	mock.lockDecode.Lock()
	mock.calls.Decode = append(mock.calls.Decode, callInfo)
	mock.lockDecode.Unlock()
	return mock.DecodeFunc(val)
}

// DecodeCalls gets all the calls that were made to Decode.
// Check the length with:
//     len(mockedMongoCursor.DecodeCalls())
func (mock *MongoCursorMock) DecodeCalls() []struct {
	Val interface{}
} {
	var calls []struct {
		Val interface{}
	}
	mock.lockDecode.RLock()
	calls = mock.calls.Decode
	mock.lockDecode.RUnlock()
	return calls
}

// Err calls ErrFunc.
func (mock *MongoCursorMock) Err() error {
	if mock.ErrFunc == nil {
		panic("MongoCursorMock.ErrFunc: method is nil but MongoCursor.Err was just called")
	}
	callInfo := struct {
	}{}
	mock.lockErr.Lock()
	mock.calls.Err = append(mock.calls.Err, callInfo)
	mock.lockErr.Unlock()
	return mock.ErrFunc()
}

// ErrCalls gets all the calls that were made to Err.
// Check the length with:
//     len(mockedMongoCursor.ErrCalls())
func (mock *MongoCursorMock) ErrCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockErr.RLock()
	calls = mock.calls.Err
	mock.lockErr.RUnlock()
	return calls
}

// Next calls NextFunc.
func (mock *MongoCursorMock) Next(ctx context.Context) bool {
	if mock.NextFunc == nil {
		panic("MongoCursorMock.NextFunc: method is nil but MongoCursor.Next was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockNext.Lock()
	mock.calls.Next = append(mock.calls.Next, callInfo)
	mock.lockNext.Unlock()
	return mock.NextFunc(ctx)
}

// NextCalls gets all the calls that were made to Next.
// Check the length with:
//     len(mockedMongoCursor.NextCalls())
func (mock *MongoCursorMock) NextCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockNext.RLock()
	calls = mock.calls.Next
	mock.lockNext.RUnlock()
	return calls
}
