// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-files-api/mongo"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	dpmongo "github.com/ONSdigital/dp-mongodb/v3/mongodb"
	"sync"
)

// Ensure, that ClientMock does implement mongo.Client.
// If this is not the case, regenerate this file with moq.
var _ mongo.Client = &ClientMock{}

// ClientMock is a mock implementation of mongo.Client.
//
// 	func TestSomethingThatUsesClient(t *testing.T) {
//
// 		// make and configure a mocked mongo.Client
// 		mockedClient := &ClientMock{
// 			CheckerFunc: func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			CloseFunc: func(contextMoqParam context.Context) error {
// 				panic("mock out the Close method")
// 			},
// 			ConnectionFunc: func() *dpmongo.MongoConnection {
// 				panic("mock out the Connection method")
// 			},
// 			URIFunc: func() string {
// 				panic("mock out the URI method")
// 			},
// 		}
//
// 		// use mockedClient in code that requires mongo.Client
// 		// and then make assertions.
//
// 	}
type ClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(contextMoqParam context.Context) error

	// ConnectionFunc mocks the Connection method.
	ConnectionFunc func() *dpmongo.MongoConnection

	// URIFunc mocks the URI method.
	URIFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CheckState is the checkState argument value.
			CheckState *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Connection holds details about calls to the Connection method.
		Connection []struct {
		}
		// URI holds details about calls to the URI method.
		URI []struct {
		}
	}
	lockChecker    sync.RWMutex
	lockClose      sync.RWMutex
	lockConnection sync.RWMutex
	lockURI        sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ClientMock) Checker(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ClientMock.CheckerFunc: method is nil but Client.Checker was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}{
		ContextMoqParam: contextMoqParam,
		CheckState:      checkState,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(contextMoqParam, checkState)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedClient.CheckerCalls())
func (mock *ClientMock) CheckerCalls() []struct {
	ContextMoqParam context.Context
	CheckState      *healthcheck.CheckState
} {
	var calls []struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *ClientMock) Close(contextMoqParam context.Context) error {
	if mock.CloseFunc == nil {
		panic("ClientMock.CloseFunc: method is nil but Client.Close was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(contextMoqParam)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedClient.CloseCalls())
func (mock *ClientMock) CloseCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Connection calls ConnectionFunc.
func (mock *ClientMock) Connection() *dpmongo.MongoConnection {
	if mock.ConnectionFunc == nil {
		panic("ClientMock.ConnectionFunc: method is nil but Client.Connection was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConnection.Lock()
	mock.calls.Connection = append(mock.calls.Connection, callInfo)
	mock.lockConnection.Unlock()
	return mock.ConnectionFunc()
}

// ConnectionCalls gets all the calls that were made to Connection.
// Check the length with:
//     len(mockedClient.ConnectionCalls())
func (mock *ClientMock) ConnectionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConnection.RLock()
	calls = mock.calls.Connection
	mock.lockConnection.RUnlock()
	return calls
}

// URI calls URIFunc.
func (mock *ClientMock) URI() string {
	if mock.URIFunc == nil {
		panic("ClientMock.URIFunc: method is nil but Client.URI was just called")
	}
	callInfo := struct {
	}{}
	mock.lockURI.Lock()
	mock.calls.URI = append(mock.calls.URI, callInfo)
	mock.lockURI.Unlock()
	return mock.URIFunc()
}

// URICalls gets all the calls that were made to URI.
// Check the length with:
//     len(mockedClient.URICalls())
func (mock *ClientMock) URICalls() []struct {
} {
	var calls []struct {
	}
	mock.lockURI.RLock()
	calls = mock.calls.URI
	mock.lockURI.RUnlock()
	return calls
}
