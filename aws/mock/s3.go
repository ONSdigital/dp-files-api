// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock_aws

import (
	"context"
	"github.com/ONSdigital/dp-files-api/aws"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"sync"
)

// Ensure, that S3ClienterMock does implement aws.S3Clienter.
// If this is not the case, regenerate this file with moq.
var _ aws.S3Clienter = &S3ClienterMock{}

// S3ClienterMock is a mock implementation of aws.S3Clienter.
//
//	func TestSomethingThatUsesS3Clienter(t *testing.T) {
//
//		// make and configure a mocked aws.S3Clienter
//		mockedS3Clienter := &S3ClienterMock{
//			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
//				panic("mock out the Checker method")
//			},
//			DeleteFunc: func(ctx context.Context, key string) error {
//				panic("mock out the Delete method")
//			},
//			HeadFunc: func(ctx context.Context, key string) (*s3.HeadObjectOutput, error) {
//				panic("mock out the Head method")
//			},
//		}
//
//		// use mockedS3Clienter in code that requires aws.S3Clienter
//		// and then make assertions.
//
//	}
type S3ClienterMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, key string) error

	// HeadFunc mocks the Head method.
	HeadFunc func(ctx context.Context, key string) (*s3.HeadObjectOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// Head holds details about calls to the Head method.
		Head []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
	}
	lockChecker sync.RWMutex
	lockDelete  sync.RWMutex
	lockHead    sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *S3ClienterMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("S3ClienterMock.CheckerFunc: method is nil but S3Clienter.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//
//	len(mockedS3Clienter.CheckerCalls())
func (mock *S3ClienterMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *S3ClienterMock) Delete(ctx context.Context, key string) error {
	if mock.DeleteFunc == nil {
		panic("S3ClienterMock.DeleteFunc: method is nil but S3Clienter.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, key)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedS3Clienter.DeleteCalls())
func (mock *S3ClienterMock) DeleteCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Head calls HeadFunc.
func (mock *S3ClienterMock) Head(ctx context.Context, key string) (*s3.HeadObjectOutput, error) {
	if mock.HeadFunc == nil {
		panic("S3ClienterMock.HeadFunc: method is nil but S3Clienter.Head was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockHead.Lock()
	mock.calls.Head = append(mock.calls.Head, callInfo)
	mock.lockHead.Unlock()
	return mock.HeadFunc(ctx, key)
}

// HeadCalls gets all the calls that were made to Head.
// Check the length with:
//
//	len(mockedS3Clienter.HeadCalls())
func (mock *S3ClienterMock) HeadCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockHead.RLock()
	calls = mock.calls.Head
	mock.lockHead.RUnlock()
	return calls
}
