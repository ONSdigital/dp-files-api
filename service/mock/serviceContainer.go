// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-files-api/clock"
	"github.com/ONSdigital/dp-files-api/files"
	"github.com/ONSdigital/dp-files-api/health"
	"github.com/ONSdigital/dp-files-api/mongo"
	"github.com/ONSdigital/dp-files-api/service"
	"net/http"
	"sync"
)

// Ensure, that ServiceContainerMock does implement service.ServiceContainer.
// If this is not the case, regenerate this file with moq.
var _ service.ServiceContainer = &ServiceContainerMock{}

// ServiceContainerMock is a mock implementation of service.ServiceContainer.
//
// 	func TestSomethingThatUsesServiceContainer(t *testing.T) {
//
// 		// make and configure a mocked service.ServiceContainer
// 		mockedServiceContainer := &ServiceContainerMock{
// 			GetClockFunc: func(ctx context.Context) clock.Clock {
// 				panic("mock out the GetClock method")
// 			},
// 			GetHTTPServerFunc: func(router http.Handler) files.HTTPServer {
// 				panic("mock out the GetHTTPServer method")
// 			},
// 			GetHealthCheckFunc: func() (health.Checker, error) {
// 				panic("mock out the GetHealthCheck method")
// 			},
// 			GetMongoDBFunc: func(ctx context.Context) (mongo.Client, error) {
// 				panic("mock out the GetMongoDB method")
// 			},
// 			ShutdownFunc: func(ctx context.Context) error {
// 				panic("mock out the Shutdown method")
// 			},
// 		}
//
// 		// use mockedServiceContainer in code that requires service.ServiceContainer
// 		// and then make assertions.
//
// 	}
type ServiceContainerMock struct {
	// GetClockFunc mocks the GetClock method.
	GetClockFunc func(ctx context.Context) clock.Clock

	// GetHTTPServerFunc mocks the GetHTTPServer method.
	GetHTTPServerFunc func(router http.Handler) files.HTTPServer

	// GetHealthCheckFunc mocks the GetHealthCheck method.
	GetHealthCheckFunc func() (health.Checker, error)

	// GetMongoDBFunc mocks the GetMongoDB method.
	GetMongoDBFunc func(ctx context.Context) (mongo.Client, error)

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// GetClock holds details about calls to the GetClock method.
		GetClock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetHTTPServer holds details about calls to the GetHTTPServer method.
		GetHTTPServer []struct {
			// Router is the router argument value.
			Router http.Handler
		}
		// GetHealthCheck holds details about calls to the GetHealthCheck method.
		GetHealthCheck []struct {
		}
		// GetMongoDB holds details about calls to the GetMongoDB method.
		GetMongoDB []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetClock       sync.RWMutex
	lockGetHTTPServer  sync.RWMutex
	lockGetHealthCheck sync.RWMutex
	lockGetMongoDB     sync.RWMutex
	lockShutdown       sync.RWMutex
}

// GetClock calls GetClockFunc.
func (mock *ServiceContainerMock) GetClock(ctx context.Context) clock.Clock {
	if mock.GetClockFunc == nil {
		panic("ServiceContainerMock.GetClockFunc: method is nil but ServiceContainer.GetClock was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetClock.Lock()
	mock.calls.GetClock = append(mock.calls.GetClock, callInfo)
	mock.lockGetClock.Unlock()
	return mock.GetClockFunc(ctx)
}

// GetClockCalls gets all the calls that were made to GetClock.
// Check the length with:
//     len(mockedServiceContainer.GetClockCalls())
func (mock *ServiceContainerMock) GetClockCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetClock.RLock()
	calls = mock.calls.GetClock
	mock.lockGetClock.RUnlock()
	return calls
}

// GetHTTPServer calls GetHTTPServerFunc.
func (mock *ServiceContainerMock) GetHTTPServer(router http.Handler) files.HTTPServer {
	if mock.GetHTTPServerFunc == nil {
		panic("ServiceContainerMock.GetHTTPServerFunc: method is nil but ServiceContainer.GetHTTPServer was just called")
	}
	callInfo := struct {
		Router http.Handler
	}{
		Router: router,
	}
	mock.lockGetHTTPServer.Lock()
	mock.calls.GetHTTPServer = append(mock.calls.GetHTTPServer, callInfo)
	mock.lockGetHTTPServer.Unlock()
	return mock.GetHTTPServerFunc(router)
}

// GetHTTPServerCalls gets all the calls that were made to GetHTTPServer.
// Check the length with:
//     len(mockedServiceContainer.GetHTTPServerCalls())
func (mock *ServiceContainerMock) GetHTTPServerCalls() []struct {
	Router http.Handler
} {
	var calls []struct {
		Router http.Handler
	}
	mock.lockGetHTTPServer.RLock()
	calls = mock.calls.GetHTTPServer
	mock.lockGetHTTPServer.RUnlock()
	return calls
}

// GetHealthCheck calls GetHealthCheckFunc.
func (mock *ServiceContainerMock) GetHealthCheck() (health.Checker, error) {
	if mock.GetHealthCheckFunc == nil {
		panic("ServiceContainerMock.GetHealthCheckFunc: method is nil but ServiceContainer.GetHealthCheck was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetHealthCheck.Lock()
	mock.calls.GetHealthCheck = append(mock.calls.GetHealthCheck, callInfo)
	mock.lockGetHealthCheck.Unlock()
	return mock.GetHealthCheckFunc()
}

// GetHealthCheckCalls gets all the calls that were made to GetHealthCheck.
// Check the length with:
//     len(mockedServiceContainer.GetHealthCheckCalls())
func (mock *ServiceContainerMock) GetHealthCheckCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetHealthCheck.RLock()
	calls = mock.calls.GetHealthCheck
	mock.lockGetHealthCheck.RUnlock()
	return calls
}

// GetMongoDB calls GetMongoDBFunc.
func (mock *ServiceContainerMock) GetMongoDB(ctx context.Context) (mongo.Client, error) {
	if mock.GetMongoDBFunc == nil {
		panic("ServiceContainerMock.GetMongoDBFunc: method is nil but ServiceContainer.GetMongoDB was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetMongoDB.Lock()
	mock.calls.GetMongoDB = append(mock.calls.GetMongoDB, callInfo)
	mock.lockGetMongoDB.Unlock()
	return mock.GetMongoDBFunc(ctx)
}

// GetMongoDBCalls gets all the calls that were made to GetMongoDB.
// Check the length with:
//     len(mockedServiceContainer.GetMongoDBCalls())
func (mock *ServiceContainerMock) GetMongoDBCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetMongoDB.RLock()
	calls = mock.calls.GetMongoDB
	mock.lockGetMongoDB.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *ServiceContainerMock) Shutdown(ctx context.Context) error {
	if mock.ShutdownFunc == nil {
		panic("ServiceContainerMock.ShutdownFunc: method is nil but ServiceContainer.Shutdown was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	return mock.ShutdownFunc(ctx)
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//     len(mockedServiceContainer.ShutdownCalls())
func (mock *ServiceContainerMock) ShutdownCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}
